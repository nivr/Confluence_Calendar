[{"name":"app.R","content":"library(shiny)\r\nlibrary(dplyr)\r\nlibrary(purrr)\r\nlibrary(writexl)\r\nlibrary(stringr)\r\nlibrary(lubridate)\r\nlibrary(tidyr)\r\nlibrary(readr)\r\n\r\nsource(\"functions.R\")\r\n\r\n# Workaround for Chromium Issue 468227\r\ndownloadButton <- function(...) {\r\n  tag <- shiny::downloadButton(...)\r\n  tag$attribs$download <- NULL\r\n  tag\r\n}\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"Confluence Calendar Aggregation Tool\"),\r\n\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      numericInput(\r\n        \"year_to_filter\",\r\n        \"Year to aggregate\",\r\n        2024,\r\n        min = 2020,\r\n        max = NA,\r\n        step = 1\r\n      ),\r\n      fileInput(\"file1\", \"Upload Confluence iCalendar export\", accept = \".ics\"),\r\n      fileInput(\"file2\", \"Optionally upload names mapping\", accept = \".csv\"),\r\n    ),\r\n\r\n    mainPanel(tableOutput(\"contents\"),\r\n              downloadButton(\"dl\", \"Download\"))\r\n  ))\r\n\r\nserver <- function(input, output) {\r\n  output$contents <- renderTable({\r\n    file <- input$file1\r\n    ext <<- tools::file_ext(file$datapath)\r\n\r\n    req(file)\r\n    validate(need(ext == \"ics\", \"Please upload an ics file\"))\r\n\r\n    parsed_ics <<- parse_ics( input$file1$datapath, filter_year = input$year_to_filter, names_mapping_file = input$file2$datapath)\r\n    parsed_ics\r\n  })\r\n  output$dl <- downloadHandler(\r\n    filename = function() { \"aggregation.xlsx\"},\r\n    content = function(file) {write_xlsx(parse_ics( input$file1$datapath, filter_year = input$year_to_filter, names_mapping_file = input$file2$datapath), path = file)}\r\n  )\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"functions.R","content":"clean_name <- function(dirty_name) {\r\n  gsub(\"\\\\s\\\\(Unlicensed\\\\)\", \"\", dirty_name)\r\n}\r\n\r\ncount_weekdays <- function(start_date, end_date) {\r\n  date_seq <- seq(ymd(start_date), ymd(end_date), by = \"days\")\r\n\r\n  weekdays_only <- date_seq[!wday(date_seq, week_start = 1) %in% c(6, 7)]\r\n\r\n  length(weekdays_only)\r\n}\r\n\r\nsplit_row <- function(row) {\r\n  start_date <- ymd(row$date_start)\r\n  end_date <- ymd(row$date_end)\r\n\r\n  month_seq <- seq(floor_date(start_date, \"month\"),\r\n                   floor_date(end_date, \"month\"),\r\n                   by = \"month\")\r\n\r\n  split_rows <- map_df(month_seq, function(month_start) {\r\n    month_end <- min(end_date, ceiling_date(month_start, \"month\") - days(1))\r\n\r\n    if (month_start == floor_date(start_date, \"month\")) {\r\n      actual_start <- start_date\r\n    } else {\r\n      actual_start <- month_start\r\n    }\r\n\r\n    if (month_end == ceiling_date(end_date, \"month\") - days(1)) {\r\n      actual_end <- end_date\r\n    } else {\r\n      actual_end <- month_end\r\n    }\r\n\r\n    data.frame(date_start = actual_start, date_end = actual_end, row[-c(1, 2)])\r\n  })\r\n\r\n  split_rows\r\n}\r\n\r\nexpand_absences_over_months <- function(events_df) {\r\n  events_df %>%\r\n    rowwise() %>%\r\n    do(split_row(.)) %>%\r\n    ungroup()\r\n}\r\n\r\nparse_date <- function(date_string, date_type = \"start\") {\r\n  if (length(grep(\"^VALUE=DATE:\\\\d*\", date_string)) > 0) {\r\n    date <- ymd(gsub(\"^VALUE=DATE:(\\\\d8)\", \"\\\\1\", date_string))\r\n    if(date_type == \"end\") date <- date - 1\r\n  }\r\n  if (length(grep(\"^TZID=\\\\w*\\\\/\\\\w*:\\\\d{8}T\\\\d{6}\", date_string)) > 0) {\r\n    date <- ymd(gsub(\"^TZID=\\\\w*\\\\/\\\\w*:(\\\\d{8})T\\\\d{6}\", \"\\\\1\", date_string))\r\n  }\r\n  date\r\n}\r\n\r\nparse_ics <- function(ics_file, names_mapping_file = NULL, filter_year = 2024) {\r\n  x <- readr::read_lines(ics_file)\r\n\r\n  organiser_indices <- which(grepl(\"^ORGANIZER\", x))\r\n  lines_removed <- 0\r\n  for (index in organiser_indices) {\r\n    target_line <- index - lines_removed\r\n    num_lines_starting_with_spaces <- min(which(grepl(\"^\\\\S\", tail(\r\n      x, length(x) - target_line\r\n    )))) - 1\r\n    organiser_lines <- x[target_line:(target_line + num_lines_starting_with_spaces)]\r\n    concatenated_line <- paste0(c(organiser_lines[1], str_sub(organiser_lines[-1], 2)), collapse = \"\")\r\n    organizer <- gsub(\".*CN=(.*);.*\", \"\\\\1\", concatenated_line)\r\n    replacement_line <- paste0(\"ORGANIZER=\", organizer)\r\n    x[target_line] <- replacement_line\r\n    x <- x[-(seq(num_lines_starting_with_spaces) + target_line)]\r\n    lines_removed <- lines_removed + num_lines_starting_with_spaces\r\n  }\r\n\r\n  attendee_indices <- which(grepl(\"^ATTENDEE\", x))\r\n  lines_removed <- 0\r\n  for (index in attendee_indices) {\r\n    target_line <- index - lines_removed\r\n    num_lines_starting_with_spaces <- min(which(grepl(\"^\\\\S\", tail(\r\n      x, length(x) - target_line\r\n    )))) - 1\r\n    attendee_lines <- x[target_line:(target_line + num_lines_starting_with_spaces)]\r\n    concatenated_line <- paste0(c(attendee_lines[1], str_sub(attendee_lines[-1], 2)), collapse = \"\")\r\n    attendee <- gsub(\".*CN=(.*);.*\", \"\\\\1\", concatenated_line)\r\n    replacement_line <- paste0(\"ATTENDEE=\", attendee)\r\n    x[target_line] <- replacement_line\r\n    x <- x[-(seq(num_lines_starting_with_spaces) + target_line)]\r\n    lines_removed <- lines_removed + num_lines_starting_with_spaces\r\n  }\r\n\r\n  event_indices <- which(grepl(\"^BEGIN:VEVENT\", x))\r\n  events <- data.frame()\r\n  for (index in event_indices) {\r\n    event_end <- min(which(grepl(\"^END:VEVENT\", tail(\r\n      x, length(x) - index\r\n    )))) + index\r\n    this_event <- x[index:event_end]\r\n    created <- gsub(\".*CREATED:(.*)\", \"\\\\1\", this_event[which(grepl(\"^CREATED\", this_event))])\r\n    date_start <- gsub(\".*DTSTART;(.*)\", \"\\\\1\", this_event[which(grepl(\"^DTSTART\", this_event))]) %>%\r\n      parse_date()\r\n    date_end <- gsub(\".*DTEND;(.*)\", \"\\\\1\", this_event[which(grepl(\"^DTEND\", this_event))]) %>%\r\n      parse_date(\"end\")\r\n    description <- gsub(\".*DESCRIPTION:(.*)\", \"\\\\1\", this_event[which(grepl(\"^DESCRIPTION\", this_event))])\r\n    summary <- gsub(\".*SUMMARY:(.*)\", \"\\\\1\", this_event[which(grepl(\"^SUMMARY\", this_event))])\r\n    organizer <- gsub(\".*ORGANIZER=(.*)\", \"\\\\1\", this_event[which(grepl(\"^ORGANIZER\", this_event))])\r\n    organizer <- clean_name(organizer)\r\n    attendees <- gsub(\".*ATTENDEE=(.*)\", \"\\\\1\", this_event[which(grepl(\"^ATTENDEE\", this_event))])\r\n    attendees <- clean_name(attendees)\r\n    category <- gsub(\".*CATEGORIES:(.*)\", \"\\\\1\", this_event[which(grepl(\"^CATEGORIES\", this_event))])\r\n    if (length(attendees) == 0)\r\n      attendees <- organizer\r\n    for (attendee in attendees) {\r\n      events <- events %>%\r\n        bind_rows(\r\n          data.frame(\r\n            date_start = date_start,\r\n            date_end = date_end,\r\n            description = description,\r\n            summary = summary,\r\n            organizer = organizer,\r\n            attendee = attendee,\r\n            category = category,\r\n            half_day = any(str_detect(tolower(summary), c(\"half\", \"1/2\", \"afternoon\", \"morning\")),str_detect(tolower(description), c(\"half\", \"1/2\", \"afternoon\", \"morning\"))),\r\n            created = created\r\n          )\r\n        )\r\n    }\r\n  }\r\n\r\n  events <- expand_absences_over_months(events)\r\n\r\n  monthly_aggregation <- events %>%\r\n    group_by(attendee,\r\n             year = as.integer(year(date_start)),\r\n             month_num = month(date_start),\r\n             month_name = month(date_start, label = TRUE),\r\n             created) %>%\r\n    summarise(num_vacation_days = if_else(half_day, count_weekdays(date_start, date_end)/2, count_weekdays(date_start, date_end)),\r\n              .groups = \"drop_last\") %>%\r\n    summarise(num_vacation_days = sum(num_vacation_days)) %>%\r\n    ungroup()\r\n\r\n  wide_format <- monthly_aggregation %>%\r\n    complete(attendee, year, month_num = 1:12, fill = list(num_vacation_days = 0)) %>%\r\n    mutate(month_name = month(month_num, label = TRUE, abbr = TRUE)) %>%\r\n    arrange(year,\r\n            month_num,\r\n            attendee) %>%\r\n    select(attendee,\r\n           year,\r\n           month_name,\r\n           num_vacation_days) %>%\r\n    pivot_wider(names_from = month_name, values_from = num_vacation_days, values_fill = 0) %>%\r\n    arrange(attendee, year)\r\n\r\n  print(filter_year)\r\n\r\n  if(!is.null(names_mapping_file)) {\r\n    names_mapping <- read_csv2(names_mapping_file)\r\n    excel_export <- wide_format %>%\r\n      left_join(names_mapping,\r\n                by = join_by(attendee == ical_name)) %>%\r\n      filter(year == filter_year,\r\n             !is.na(controlling_name)) %>%\r\n      select(name = controlling_name,\r\n             year,\r\n             all_of(seq(ymd(paste0(filter_year, '-01-01')), ymd(paste0(filter_year, '-12-31')), by='1 month') %>% month(label = TRUE)))\r\n  } else {\r\n    excel_export <- wide_format %>%\r\n      filter(year == filter_year) %>%\r\n      select(name = attendee,\r\n             year,\r\n             all_of(seq(ymd(paste0(filter_year, '-01-01')), ymd(paste0(filter_year, '-12-31')), by='1 month') %>% month(label = TRUE)))\r\n  }\r\n\r\n  excel_export\r\n}\r\n","type":"text"}]
